@page "/counter"
@rendermode InteractiveServer
@using UI.ImageUploader

@inject IImageUploader up

<h1>@message</h1>

<div class="input-group">
    <div class="custom-file">
        <InputFile class="custom-file-input"  OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile" />
        <label class="custom-file-label" for="inputFile">Choose file</label>
    </div>
    <div class="input-group-append">
        <button class="btn btn-success" @onclick="Upload" disabled="@isDisabled">Upload</button>
    </div>
</div>

@foreach (var item in filesBase64)
{
    <img src="data:@item.contentType;base64,@item.base64data" />
}

@code {
    

    // To upload Image 

    List<ImageFile> filesBase64 = new List<ImageFile>();
    string message = "InputFile";
    bool isDisabled = false;

    // get image
    async Task OnChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480);
            var buf = new byte[resizedFile.Size];
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf);
            }
            filesBase64.Add(new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name });
        }
        message = "Click UPLOAD to continue";
    }



    //Save the Image
    async Task Upload()
    {
        isDisabled = true;
        await up.Post(filesBase64.ToArray());
        isDisabled = false;
        message = $"{filesBase64.Count} files uploaded";
        filesBase64.Clear();
    }
}


